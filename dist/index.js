/******/ (() => { // webpackBootstrap
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/******/ (function () {
    /*!******************!*\
      !*** ./index.js ***!
      \******************/
    /******/ (function () {
        /*!******************!*\
          !*** ./index.js ***!
          \******************/
        /******/ (function () {
            /******/ "use strict";
            /******/ var __webpack_modules__ = ({
                /***/ "./Colors.js": 
                /*!*******************!*\
                  !*** ./Colors.js ***!
                  \*******************/
                /***/ (function (__unused_webpack_module, exports) {
                    Object.defineProperty(exports, "__esModule", ({ value: true }));
                    exports["default"] = {
                        color: function (color) {
                            return this.send("color", {
                                "color": {
                                    "color": color
                                }
                            });
                        },
                        info: function () {
                            return this.color("blue");
                        },
                        success: function () {
                            return this.color("green");
                        },
                        warning: function () {
                            return this.color("orange");
                        },
                        danger: function () {
                            return this.color("red");
                        }
                    };
                    /***/
                }),
                /***/ "./LaraDumps.js": 
                /*!**********************!*\
                  !*** ./LaraDumps.js ***!
                  \**********************/
                /***/ (function (__unused_webpack_module, exports, __nested_webpack_require_1293__) {
                    var __assign = (this && this.__assign) || function () {
                        __assign = Object.assign || function (t) {
                            for (var s, i = 1, n = arguments.length; i < n; i++) {
                                s = arguments[i];
                                for (var p in s)
                                    if (Object.prototype.hasOwnProperty.call(s, p))
                                        t[p] = s[p];
                            }
                            return t;
                        };
                        return __assign.apply(this, arguments);
                    };
                    Object.defineProperty(exports, "__esModule", ({ value: true }));
                    var Colors_1 = __nested_webpack_require_1293__(/*! ./Colors */ "./Colors.js");
                    var Screen_1 = __nested_webpack_require_1293__(/*! ./Screen */ "./Screen.js");
                    var LaraDumps = __assign(__assign(__assign({ instanceId: null, requestId: null, server: "http://127.0.0.1:9191/api/dumps", params: [], generateIds: function () {
                            this.instanceId = crypto.randomUUID();
                            this.requestId = crypto.randomUUID();
                            return this;
                        } }, Colors_1.default), Screen_1.default), { json: function (json) {
                            return this.send("json", {
                                "json": {
                                    "string": JSON.stringify(json),
                                    "original_content": JSON.stringify(json)
                                }
                            });
                        }, send: function (type, data) {
                            fetch(this.server, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(__assign({ "id": this.instanceId, "request_id": this.requestId, "meta": {
                                        "laradumps_version": "2.0.2.0",
                                        "auto_invoke_app": false
                                    }, "type": type }, data)),
                            });
                            return this;
                        } });
                    exports["default"] = LaraDumps;
                    /***/
                }),
                /***/ "./Screen.js": 
                /*!*******************!*\
                  !*** ./Screen.js ***!
                  \*******************/
                /***/ (function (__unused_webpack_module, exports) {
                    Object.defineProperty(exports, "__esModule", ({ value: true }));
                    exports["default"] = {
                        s: function (screenName) {
                            return this.toScreen(screenName);
                        },
                        toScreen: function (screenName, screenRaisenIn) {
                            if (screenRaisenIn === void 0) {
                                screenRaisenIn = 0;
                            }
                            return this.send("screen", {
                                "screen": {
                                    "screen_name": screenName,
                                    "raisen_in": screenRaisenIn
                                }
                            });
                        },
                    };
                    /***/
                })
                /******/
            });
            /************************************************************************/
            /******/ // The module cache
            /******/ var __webpack_module_cache__ = {};
            /******/
            /******/ // The require function
            /******/ function __nested_webpack_require_4633__(moduleId) {
                /******/ // Check if module is in cache
                /******/ var cachedModule = __webpack_module_cache__[moduleId];
                /******/ if (cachedModule !== undefined) {
                    /******/ return cachedModule.exports;
                    /******/ }
                /******/ // Create a new module (and put it into the cache)
                /******/ var module = __webpack_module_cache__[moduleId] = {
                    /******/ // no module.id needed
                    /******/ // no module.loaded needed
                    /******/ exports: {}
                    /******/
                };
                /******/
                /******/ // Execute the module function
                /******/ __webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_4633__);
                /******/
                /******/ // Return the exports of the module
                /******/ return module.exports;
                /******/
            }
            /******/
            /************************************************************************/
            var __nested_webpack_exports__ = {};
            // This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
            (function () {
                var exports = __nested_webpack_exports__;
                /*!******************!*\
                  !*** ./index.js ***!
                  \******************/
                Object.defineProperty(exports, "__esModule", ({ value: true }));
                exports.ds = ds;
                var LaraDumps_1 = __nested_webpack_require_4633__(/*! ./LaraDumps */ "./LaraDumps.js");
                function ds() {
                    var params = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        params[_i] = arguments[_i];
                    }
                    var instance = LaraDumps_1.default.generateIds();
                    params.forEach(function (param) {
                        var type = typeof (param);
                        if (type === "object" && param.prototype === undefined) {
                            instance.json(param);
                            return;
                        }
                        else if (type === "object") {
                            console.info("Laradumps: Using JSON object as parameter. Please use `ds.json` if you want to send a JSON object.");
                            return;
                        }
                        instance.send("dump", {
                            "dump": {
                                "dump": param,
                                "original_content": param,
                                "variable_type": type,
                            }
                        });
                    });
                    return instance;
                }
                ;
                globalThis.ds = ds;
            })();
            /******/
        })();
        /******/
    })();
    /******/ 
})();


/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,